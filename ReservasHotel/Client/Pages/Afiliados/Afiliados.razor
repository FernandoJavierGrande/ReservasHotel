@page "/Afiliados"
@inject IHttpService http
@inject NavigationManager navigationManager

<h3>Lista de Afiliados</h3>

<div>
    <a class = "btn btn-primary" href="Afiliados/Cargar"> Nuevo afiliado</a>
</div>

<table class="table table-hover table-light table-sm">
    <thead>
        <tr>
            <th scope="col">Cuil</th>
            <th scope="col">Nombre</th>
            <th scope="col">Apellido</th>
            <th> </th>
            <th> </th>
        </tr>
    </thead>
    <tbody>
        @if (afiliados == null)
        {
            <tr>Cargando</tr>
        }
        else if (afiliados.Count == 0)
        {
            <tr>No hay datos disponibles</tr>
        }
        else
        {
            @foreach (var item in afiliados)
            {
                <tr>
                    <td>@item.Cuil</td>
                    <td>@item.Nombre</td>
                    <td>@item.Apellido</td>
                    <td> <a class="btn btn-secondary" href="/Afiliados/Editar/@item.Cuil">Editar</a></td>
                    <td> <a class="btn btn-warning" @onclick="()=>Eliminar(item)">Eliminar</a></td>
                </tr>
            }
        }
    </tbody>
    
    </table>
    <Confirmacion   @ref="confirmacion" 
                verCancelar = "true"
                verOk="true"
                Titulo="Eliminar afiliado de la base de datos"
                onCancel="Cerrar"
                onConfirm="BorrarAfiliado">
                <div>
                   ¿Desea eliminar el afiliado Cuil: @AfiliadoBorrar.Cuil
                    <br/>
                    Nombre: @AfiliadoBorrar.Apellido @AfiliadoBorrar.Nombre? 
                </div>

    </Confirmacion>


@code {
    List<Afiliado> afiliados = new List<Afiliado>();
    Afiliado AfiliadoBorrar;
    Confirmacion confirmacion;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        await readAfiliados();

    }
    private async Task readAfiliados()
    {

        try
        {
            var respuesta = await http.Get<List<Afiliado>>("api/Afiliados");
            if (!respuesta.Error)
            {
                afiliados = respuesta.Respuesta;
            
            }   
        }
        catch (Exception)
        {
            navigationManager.NavigateTo("/");
        }
        
    }
    private void Eliminar(Afiliado afiliado)
    {
        AfiliadoBorrar = afiliado;
        confirmacion.Ver();
    }
    private void Cerrar()
    {
        confirmacion.Ocultar();
        AfiliadoBorrar = null;
    }
    private async Task BorrarAfiliado()
    {
        var resp = await http.Delete($"api/Afiliados/{AfiliadoBorrar.Cuil}");
        if(resp.Error)
        {
            var body = "Error";
        }
        Cerrar();
        await readAfiliados();
    }

}
