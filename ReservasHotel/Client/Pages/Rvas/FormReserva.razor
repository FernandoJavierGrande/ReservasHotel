@inject IHttpService http

<EditForm Model="afiliado" OnValidSubmit="onValidSubmit" > 
    <DataAnnotationsValidator/>
    <div class="form-control">
        <label>Cuil del afiliado</label>
        <div>
            <InputText class="form-control"  @bind-Value=@afiliado.Cuil @onfocusout="ExistCuil" ></InputText>
            <ValidationMessage For="@(() => afiliado.Cuil)"/>
        </div>
        <div>
            <label>Nombre del afiliado</label>
            <InputText class = "form-control" @bind-Value=afiliado.Nombre disabled="disabled" ></InputText>
        </div>
        
    </div>
    
</EditForm>

<br/>
<EditForm Model="reserva" OnValidSubmit="onValidSubmit" > 
    <DataAnnotationsValidator/>
    <div class="form-control-lg">
        <label> Fecha de ingreso</label>
        <div>
            <InputDate class = "form-control" @bind-Value=@reserva.F_inicio @onfocusout="bindFecha"></InputDate>
            <ValidationMessage For=@(()=> reserva.F_inicio)/>
        <label> Fecha de Salida</label>
        <div>
            <InputDate class = "form-control" @bind-Value=@reserva.F_fin></InputDate>
            <ValidationMessage For=@(()=> reserva.F_fin)/>
        </div>
        </div>    
    </div>
    

    <div class="form-control">
        <div >
            <label>Seleccione las habitaciones</label>

            <select  id="cmbHab" class = "form-control-label" @onchange="HabSel">
                <option value="0" selected disabled>- Seleccione la habitacion -</option>
                @foreach (var hab in habitaciones)
                {
                    <option value="@hab.NHab">@hab.NHab  @hab.Tipo</option>
                }
            </select>
        </div>
        <br />
        <div class="form-group">
            <label>Usted seleccionó las habitaciones: @foreach (var item in ListaDeHab)
                {
                    <label>@item.ToString();</label>
                }</label>
            <div>
                <button class="btn btn-light"  @onclick="Limpiar">Limpiar</button>
            </div>

        </div>


        <div>
            <label>Estado del pago de la reserva (pagado, señado)</label>
            <InputText class="form-control" @bind-Value=@reserva.EstadoPago></InputText>
        </div>
        <div>
            <label>Observaciones</label>
            <InputText class ="form-control" @bind-Value=@reserva.Obs></InputText>
        </div>
    </div>
    <div class="col-md-3 col-md-offset-9 text-right">
        <button class ="@btn_subm_type" type="submit">@txt_btn_Ok</button>
        <button class ="btn alert-secondary" @onclick="cancelar"> Cancelar</button>
    </div>



</EditForm>


@code {
    [Parameter] public Afiliado afiliado { get; set; }
    [Parameter] public Reserva reserva { get; set; }
    [Parameter] public EventCallback onValidSubmit { get; set; }
    [Parameter] public EventCallback cancelar { get; set; }
    [Parameter] public List<string> ListaDeHab { get; set; } = new List<string>();
    [Parameter]public string btn_subm_type { get; set; } = "btn btn-primary";
    [Parameter]public string txt_btn_Ok { get; set; } = "Aceptar";

    private List<Habitacion> habitaciones = new List<Habitacion>();

    private string habActual="0";


    private async void ExistCuil()
    {

        if (afiliado.Cuil!=null && !afiliado.Cuil.Contains(" "))
        {
            var httpRespuesta = await http.Get<Afiliado>($"api/Afiliados/{afiliado.Cuil}");

            if (!httpRespuesta.Error) // si existe el afiliado carga el id De la resp
            {
                reserva.AfiliadoId = httpRespuesta.Respuesta.Id;
                afiliado.Nombre =$"{httpRespuesta.Respuesta.Nombre} { httpRespuesta.Respuesta.Apellido}";
                StateHasChanged();
            }else
            {
                var body = httpRespuesta.HttpResponseMessage;
                afiliado.Nombre = "El afiliado no existe";
                StateHasChanged();
            }
        }
    }
    private void HabSel(ChangeEventArgs e)
    {

        if (!ListaDeHab.Contains(e.Value))
        {
            ListaDeHab.Add(e.Value.ToString());
            reserva.HabitacionesEnLaReserva = ListaDeHab;
        }      
    }


    protected override async Task OnInitializedAsync()
    {
        base.OnInitializedAsync();

        reserva.FechaCreacion = DateTime.Today.Date;
        reserva.Estado = true;
        reserva.F_inicio = DateTime.Today.Date;
        reserva.F_fin = reserva.F_inicio;

        await LeerHabitaciones();

    }

    private async Task LeerHabitaciones()
    {
        var respuesta = await http.Get<List<Habitacion>>("api/Habitacion");
        if (!respuesta.Error)
        {
            foreach (var hab in respuesta.Respuesta)
            {
                habitaciones.Add(hab);
            }
        }

    }
    private void Limpiar()
    {
        ListaDeHab = new List<string>();
        StateHasChanged();
    }
    private void bindFecha()
    {
        reserva.F_fin = reserva.F_inicio;
        StateHasChanged();
    }

}
